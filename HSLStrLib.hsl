// This is a part of the HSL String Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2001-06-26  bandenmatten : Removed onerror goto statements from library functions.
// 2001-07-17  bandenmatten : Divided library into interface and implemenation.
// 2002-02-21  bandenmatten : Added functions StrFillLeft() and StrFillRight().
// 2002-04-05  bandenmatten : Optimized performance of functions StrStrToAscii(), and StrAsciiToStr().
// 2002-02-21  bandenmatten : Added function StrFStrEx().
// 2002-07-03  bandenmatten : Created the temporary file in function StrEvaluateExpr() in the LogFiles 
//										directory and not any longer in the current directory.
// 2002-07-06  bandenmatten : Made library language independant.
// 2002-09-17  bandenmatten : Function StrReplace(): If the sub string to replace started at the first 
//										character of the string, the function didn't work correctly. 
//										Example: StrReplace("abcd", "a", "") didn't replace the leading character 
//										"a" by "". Fixed this bug. 
// 2002-12-05  bandenmatten : Specified return values for exported library functions.
// 2007-07-02  bandenmatten : Removed define _STR_WINNT.
// 2009-09-09  bandenmatten : Added AddCheckSum() line to function StrEvaluateExpr().
// 2011-05-05  bandenmatten : Added functions StrMakeUpperCopy() and StrMakeLowerCopy().

#ifndef __HSLStrLib_hsl__
#define __HSLStrLib_hsl__	1

// Interface to String library 
#ifndef HSL_RUNTIME
function StrSpanExcluding(variable& str, variable& subStr) variable		{return(0);}
function StrFind(variable& str, variable& subStr) variable					{return(0);}
function StrLeft(variable& str, variable count) variable						{return(0);}
function StrMid(variable& str, variable first, variable count) variable	{return(0);}
function StrRight(variable& str, variable count) variable					{return(0);}
function StrGetLength(variable& str) variable									{return(0);}
function StrMakeUpper(variable& str) variable									{return(0);}
function StrMakeUpperCopy(variable& str) variable								{return(0);}
function StrMakeLower(variable& str) variable									{return(0);}
function StrMakeLowerCopy(variable& str) variable								{return(0);}
function StrIStr(variable number) variable										{return(0);}
function StrHexIStr(variable number) variable									{return(0);}
function StrIVal(variable& str) variable											{return(0);}
function StrFStr(variable number) variable										{return(0);}
function StrFStrEx(variable number, variable languageSpecific, variable precision) variable	{return(0);}
function StrFVal(variable& str) variable											{return(0);}
function StrGetType(variable& var) variable										{return(0);}
function StrConcat2(variable var1, variable var2) variable					{return(0);}
function StrConcat4(variable var1, variable var2, variable var3, variable var4) variable	{return(0);}
function StrConcat8(variable var1, variable var2, variable var3, variable var4, variable var5, variable var6, variable var7, variable var8) variable	{return(0);}
function StrConcat12(variable var1, variable var2, variable var3, variable var4, variable var5, variable var6, variable var7, variable var8, variable var9, variable var10, variable var11, variable var12) variable	{return(0);}
function StrEvaluateExpr(variable& expression) variable						{return(0);}
function StrReverseFind(variable& str, variable& subStr) variable			{return(0);}
function StrReplace(variable& str, variable& oldSubStr, variable& newSubStr) variable	{return(0);}
function StrTrimLeft(variable& str, variable& character) variable			{return(0);}
function StrTrimRight(variable& str, variable& character) variable		{return(0);}
function StrStrToAscii(variable character) variable							{return(0);}
function StrAsciiToStr(variable asciiCode) variable							{return(0);}
function StrIsDigit(variable character) variable								{return(0);}
function StrFillLeft(variable& str, variable& character, variable width) variable	{return(0);}
function StrFillRight(variable& str, variable& character, variable width) variable	{return(0);}
#endif

// Implementation of String library 
#ifdef HSL_RUNTIME

static variable strCmdPrompt("cmd.exe");

namespace Str
{

	// --------------------------------------------------------------------------------------
	// Error Ids
	// --------------------------------------------------------------------------------------

	namespace IDE
	{
		static const variable first(0);									// guard
		static const variable noError(first);							// No error.
		static const variable unknownType(first + 1);				// Unknown type : 
		static const variable addFieldFailed(first + 2);			// Failed to add field to record.
		static const variable openFileFailed(first + 3);			// Failed to open file: 
		static const variable closeFileFailed(first + 4);			// Failed to close file: 
		static const variable writeRecordFailed(first + 5);		// Failed to write record.
		static const variable shellOutDeleteFailed(first + 6);	// Failed to shell out delete command.
		static const variable last(first + 6);							// guard
	}

	// --------------------------------------------------------------------------------------
	// String Ids
	// --------------------------------------------------------------------------------------

	namespace IDS
	{
		static const variable first(IDE::last + 1);					// guard
		static const variable helpFileName(first + 1);				// help file name
		static const variable last(first + 1);							// guard
	}

	#ifndef __HSLStringTableLib_hsl__
	#include "HSLStringTableLib.hs_"
	#endif

	// --------------------------------------------------------------------------------------
	// Library Initialization 
	// --------------------------------------------------------------------------------------

	static variable initializedLib(hslFalse);							// initialization state of the String Library
	static function InitStringLibrary();								// initializes the String Library (only once)

	// --------------------------------------------------------------------------------------
	// Exception handling
	// --------------------------------------------------------------------------------------

	namespace Error
	{
		static function Raise(												// raises a runtime error
			variable errorId,													// i: error id, one of IDE
			variable& fileName,												// i: file name
			variable& funcName,												// i: function name
			variable& lineNumber)											// i: line number
		{
			variable description("");

			// set error description
			description = fileName + "(" + lineNumber + ") : " + funcName + "()\n" + StringTable::Load(errorId);
			err.SetDescription(description);

			// raise error
			err.Raise(errorId, err.GetDescription(), StringTable::Load(IDS::helpFileName));
		}

		static function RaiseEx(
			variable errorId,
			variable errorDetail,
			variable& fileName,
			variable& funcName,
			variable& lineNumber)
		{
			variable description("");

			// set error description
			description = fileName + "(" + lineNumber + ") : " + funcName + "()\n" + StringTable::Load(errorId) + errorDetail;
			err.SetDescription(description);

			// raise error
			err.Raise(errorId, err.GetDescription(), StringTable::Load(IDS::helpFileName));
		}
	}

	// --------------------------------------------------------------------------------------
	// Functions
	// --------------------------------------------------------------------------------------

	static function InitStringLibrary()
	{
		// initialize the String Library once only
		if (!initializedLib)
		{
			StringTable::Init("HSLStrLib");
			//StringTable::Dump();
			initializedLib = hslTrue;
		}
		return(initializedLib);
	}
}

// Helper function  
static function Str__(variable& str)
{
	return(str);
}

// Wrapper function  
function StrSpanExcluding(variable& str, variable& subStr) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.SpanExcluding(subStr));
}

// Wrapper function  
function StrFind(variable& str, variable& subStr) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.Find(subStr));
}

// Wrapper function  
function StrLeft(variable& str, variable count) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.Left(count));
}

// Wrapper function  
function StrMid(variable& str, variable first, variable count) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.Mid(first, count));
}

// Wrapper function  
function StrRight(variable& str, variable count) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.Right(count));
}

// Wrapper function  
function StrGetLength(variable& str) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.GetLength());
}

// Wrapper function  
function StrMakeUpper(variable& str) variable
{
	string tmpStr;
	tmpStr = str;
	return(str = tmpStr.MakeUpper());
}

// Wrapper function  
function StrMakeUpperCopy(variable& str) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.MakeUpper());
}

// Wrapper function  
function StrMakeLower(variable& str) variable
{
	string tmpStr;
	tmpStr = str;
	return(str = tmpStr.MakeLower());
}

// Wrapper function  
function StrMakeLowerCopy(variable& str) variable
{
	string tmpStr;
	tmpStr = str;
	return(tmpStr.MakeLower());
}

// Wrapper function  
function StrIStr(variable number) variable
{
	return(IStr(number));
}

// Returns the hex string representation of an integer number 
#define LONG_MAX	2147483647  // maximum long value 
function StrHexIStr(variable number) variable
{
	variable base, remainder, quotient, unsignedNum(number);
	string digits, digit, result;

	base = 16;
	digits = "0123456789abcdef";

	if (number < 0)
		unsignedNum = LONG_MAX + number + 1;
	remainder = unsignedNum % base;
	for (quotient = unsignedNum / base; 
		 quotient != 0; 
		 quotient = quotient / base)
	{
		digit = digits.Mid(remainder, 1);
		result = digit + result;
		remainder = quotient % base;
	}
	if (result.GetLength() < 7)
	{
		digit = digits.Mid(remainder, 1);
		result = digit + result;
		remainder = 0;
		while(result.GetLength() < 7)
		{
			digit = digits.Mid(0, 1);
			result = digit + result;
		}
	}
	if (number < 0)
		digit = digits.Mid(remainder + 8, 1);
	else
		digit = digits.Mid(remainder, 1);
	result = digit + result;
	digit = "0x";
	result = digit + result;
	return(result);
}

// Wrapper function  
function StrIVal(variable& str) variable
{
	return(IVal(str));
}

// Wrapper function  
function StrFStr(variable number) variable
{
	return(FStr(number));
}

// Wrapper function  
function StrFStrEx(variable number, variable languageSpecific, variable precision) variable
{
	return(FStr(number, languageSpecific, precision));
}

// Wrapper function  
function StrFVal(variable& str) variable
{
	return(FVal(str));
}

// Wrapper function  
function StrGetType(variable& var) variable
{
	return(GetType(var));
}

// Helper function  
static function StrStr(variable var)
{
	variable type;

	// initialize String Library
	Str::InitStringLibrary();

	type = GetType(var);
	if (hslInteger.Compare(type) == 0)
	{
		var = IStr(var);
	}
	else
	{
		if (hslFloat.Compare(type) == 0)
		{
			var = FStr(var);
		}
		else
		{
			if (hslString.Compare(type) != 0)
			{
				Str::Error::RaiseEx(Str::IDE::unknownType, type, GetFileName(), GetFunctionName(), GetLineNumber());
			}
		}
	}
	return(var);
}

//	The concat functions return the concatenation of the arguments.
//	If an argument is not of type string, it is first converted to 
//	a string and then evaluated.

//	Example
//	The following function call returns "abcdefg":
//	StrConcat4("abc", "d", "ef", "g")


function StrConcat2(variable var1, variable var2) variable
{
	return(StrStr(var1) + StrStr(var2));
}

function StrConcat4(variable var1, variable var2, variable var3, variable var4) variable
{
	return(StrStr(var1) + StrStr(var2) + StrStr(var3) + StrStr(var4));
}

function StrConcat8(variable var1, variable var2, variable var3, variable var4, variable var5, variable var6, variable var7, variable var8) variable
{
	return(StrStr(var1) + StrStr(var2) + StrStr(var3) + StrStr(var4) + StrStr(var5) + StrStr(var6) + StrStr(var7) + StrStr(var8));
}

function StrConcat12(variable var1, variable var2, variable var3, variable var4, variable var5, variable var6, variable var7, variable var8, variable var9, variable var10, variable var11, variable var12) variable
{
	return(StrStr(var1) + StrStr(var2) + StrStr(var3) + StrStr(var4) + StrStr(var5) + StrStr(var6) + StrStr(var7) + StrStr(var8) + StrStr(var9) + StrStr(var10) + StrStr(var11) + StrStr(var12));
}

// The StrEvaluateExpr function evaluates an expression. All variables referenced inside 
// the expression must have global scope.  

// Helper function, evaluates expression 
static function __EvalExpr__();

function StrEvaluateExpr(variable& expression) variable
{
	file f;
	variable code;
	variable value(0);
	variable tmpFile(GetLogFilesPath() + "\\__EvalExpr__.txt");
	string tmpFileStr(tmpFile);

	// initialize String Library
	Str::InitStringLibrary();

	code = "\nfunction __EvalExpr__()\n{\n\treturn(" + expression + ");\n}\n";
	f.SetDelimiter(hslAsciiText);
	if (!f.AddField(1, code, hslString))
		Str::Error::Raise(Str::IDE::addFieldFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!f.Open(tmpFile, hslWrite))
		Str::Error::RaiseEx(Str::IDE::openFileFailed, tmpFile, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!f.WriteRecord())
		Str::Error::Raise(Str::IDE::writeRecordFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (f.Close())
		Str::Error::RaiseEx(Str::IDE::closeFileFailed, tmpFile, GetFileName(), GetFunctionName(), GetLineNumber());
	//>> 20090909
	AddCheckSum(tmpFileStr, "//", hslTrue);
	//<< 20090909
	<< tmpFileStr;
	value = __EvalExpr__();
	if (!Shell(strCmdPrompt + " /c del \"" + tmpFile + "\"", hslHide, hslSynchronous))
		Str::Error::Raise(Str::IDE::shellOutDeleteFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	return(value);
}

// Searches a string object for the last match of a substring. 
function StrReverseFind(variable& str, variable& subStr) variable
{
	variable index;
	variable result(-1);
	variable strLength;
	variable subLength;
	string strStr;

	strStr = str;
	strLength = strStr.GetLength();
	for (index = strStr.Find(subStr); 
		 index != -1; 
		 index = strStr.Find(subStr))
	{
		result = result + index + 1;
		strStr = strStr.Mid(index + 1, strLength);
	}
	return(result);
}

// Replaces indicated substrings with another substring.  
function StrReplace(variable& str, variable& oldSubStr, variable& newSubStr) variable
{
	variable index;
	variable result("");
	variable strLength;
	variable oldLength;
	variable replacements(0);
	string old;
	string strStr;

	strStr = str;
	old = oldSubStr;
	strLength = strStr.GetLength();
	oldLength = old.GetLength();
	for (index = strStr.Find(old); 
		 index != -1; 
		 index = strStr.Find(old))
	{
		result = result + strStr.Left(index) + newSubStr;
		strStr = strStr.Mid(index + oldLength, strLength);
		replacements++;
	}
	if (0 < replacements)
		str = result + Str__(strStr);
	return(replacements);
}

// Trim leading whitespace characters from the string. 
function StrTrimLeft(variable& str, variable& character) variable
{
	variable index;
	variable strLength;
	variable chrLength;
	string strStr;
	string chrStr;

	strStr = str;
	strLength = strStr.GetLength();
	chrStr = character;
	chrLength = chrStr.GetLength();
	index = strStr.Find(" ");
	if (0 != index)
		index = strStr.Find("\n");
	if (0 != index)
		index = strStr.Find("\t");
	if (0 != index && 0 < chrLength)
		index = strStr.Find(character);
	while (index == 0) 
	{
		strStr = strStr.Mid(1, strLength);
		index = strStr.Find(" ");
		if (0 != index)
			index = strStr.Find("\n");
		if (0 != index)
			index = strStr.Find("\t");
		if (0 != index && 0 < chrLength)
			index = strStr.Find(character);
	}
	str = strStr;
	return(str);
}

// Trim trailing whitespace characters from the string. 
function StrTrimRight(variable& str, variable& character) variable
{
	variable index;
	variable strLength;
	variable chrLength;
	string strStr;
	string chrStr;

	strStr = str;
	strLength = strStr.GetLength();
	chrStr = character;
	chrLength = chrStr.GetLength();
	index = StrReverseFind(strStr, " ");
	if (index != (strLength - 1))
		index = StrReverseFind(strStr, "\n");
	if (index != (strLength - 1))
		index = StrReverseFind(strStr, "\t");
	if (index != (strLength - 1) && 0 < chrLength)
		index = StrReverseFind(strStr, character);
	while (index == (strLength - 1))
	{
		strStr = strStr.Left(strLength - 1);
		strLength = strStr.GetLength();
		if (0 == strLength)
			break;
		index = StrReverseFind(strStr, " ");
		if (index != (strLength - 1))
			index = StrReverseFind(strStr, "\n");
		if (index != (strLength - 1))
			index = StrReverseFind(strStr, "\t");
		if (index != (strLength - 1) && 0 < chrLength)
			index = StrReverseFind(strStr, character);
	}
	str = strStr;
	return(str);
}

// ASCII table (without ascii null)
namespace ASCII
{
static const string chr("\
\001\002\003\004\005\006\007\008\009\010\011\012\013\014\015\016\017\018\019\020\
\021\022\023\024\025\026\027\028\029\030\031\032\033\034\035\036\037\038\039\040\
\041\042\043\044\045\046\047\048\049\050\051\052\053\054\055\056\057\058\059\060\
\061\062\063\064\065\066\067\068\069\070\071\072\073\074\075\076\077\078\079\080\
\081\082\083\084\085\086\087\088\089\090\091\092\093\094\095\096\097\098\099\100\
\101\102\103\104\105\106\107\108\109\110\111\112\113\114\115\116\117\118\119\120\
\121\122\123\124\125\126\127\128\129\130\131\132\133\134\135\136\137\138\139\140\
\141\142\143\144\145\146\147\148\149\150\151\152\153\154\155\156\157\158\159\160\
\161\162\163\164\165\166\167\168\169\170\171\172\173\174\175\176\177\178\179\180\
\181\182\183\184\185\186\187\188\189\190\191\192\193\194\195\196\197\198\199\200\
\201\202\203\204\205\206\207\208\209\210\211\212\213\214\215\216\217\218\219\220\
\221\222\223\224\225\226\227\228\229\230\231\232\233\234\235\236\237\238\239\240\
\241\242\243\244\245\246\247\248\249\250\251\252\253\254\255");
}

// The StrAsciiToStr function converts the given ASCII code (integer) to a character (string).
//
// Parameter:
// asciiCode	ASCII code to convert (integer).
//
// Return:
// The character (string) of the given ASCII code (integer) if the function succeeds, 
// otherwise -1.

function StrAsciiToStr(variable asciiCode) variable
{
	variable result(-1);

	// handle ascii null
	if (0 == asciiCode)
		result = "\000";

	// extract 'asciiCode' from ascii table
	if (0 < asciiCode && asciiCode <= 255)
	{
		result = ASCII::chr.Mid(asciiCode - 1, 1);
	}
	return(result);
}

// The StrStrToAscii function converts the given character (string) to an ASCII code (integer).
//
// Parameter:
// character	Character to convert (string).
//
// Return:
// The ASCII code (integer) of the given character if the function succeeds, 
// otherwise -1.

function StrStrToAscii(variable character) variable
{
	variable result(-1);

	// handle ascii null
	if ("\000" == character)
		result = 0;

	// search 'character' in ascii table
	if ("\000" < character && character <= "\255")
	{
		variable asciiCode;
		for (asciiCode = 1; asciiCode <= 255; asciiCode++)
		{
			if (character == ASCII::chr.Mid(asciiCode - 1, 1))
			{
				result = asciiCode;
				break;
			}
		}
	}
	return(result);
}

// Returns 1 if the character is a digit; 0 otherwise.
function StrIsDigit(variable character) variable
{
	string tmpStr;
	string digits("0123456789");
	tmpStr = character;
	tmpStr = tmpStr.SpanExcluding(digits);
	return(!tmpStr.GetLength());
}

// Fills leading characters to the string.
function StrFillLeft(variable& str, variable& character, variable width) variable
{
	while (StrGetLength(str) < width)
	{
		str = character + str;
	}
	return(str);
}

// Fills trailing characters to the string.
function StrFillRight(variable& str, variable& character, variable width) variable
{
	while (StrGetLength(str) < width)
	{
		str = str + character;
	}
	return(str);
}
#endif

#endif
// $$author=wbarmettler$$valid=1$$time=2017-03-09 07:27$$checksum=14ec4aa2$$length=090$$